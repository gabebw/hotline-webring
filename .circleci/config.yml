# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    working_directory: ~/gabebw/hotline-webring
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: circleci/ruby:2.5.3-node
      environment:
        RAILS_ENV: test
        PGHOST: localhost
        PGUSER: hotlinewebring
    - image: postgres:10.5
      environment:
        POSTGRES_USER: hotlinewebring
        POSTGRES_DB: hotlinewebring_test
        POSTGRES_PASSWORD: ""

    steps:
      - checkout
      # Prepare for artifact and test results collection equivalent to how it was done on 1.0.
      # In many cases you can simplify this from what is generated here.
      # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      - run:
          command: cp .sample.env .env

      # Restore the dependency cache
      - restore_cache:
          keys:
          - hotlinewebring-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          - hotlinewebring-
      # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
      - run: echo -e "export RAILS_ENV=test\nexport RACK_ENV=test" >> $BASH_ENV
      - run: 'bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
          --jobs=4 --retry=3 '
      # Save dependency cache
      - save_cache:
          key: hotlinewebring-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
            - ~/.bundle

      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: bin/setup
      - run: bundle exec rake db:test:prepare
      - run: RAILS_ENV=test bundle exec rspec -r rspec_junit_formatter --format RspecJunitFormatter -o $CIRCLE_TEST_REPORTS/rspec/junit.xml
      - run: bundle exec rake bundler:audit
      - store_test_results:
          path: $CIRCLE_TEST_REPORTS
      - store_artifacts:
          path: $CIRCLE_ARTIFACTS
      - store_artifacts:
          path: $CIRCLE_TEST_REPORTS
